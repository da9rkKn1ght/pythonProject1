Index: models_database/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.shortcuts import render\r\nfrom django.http import HttpResponse\r\nfrom django.urls import reverse_lazy\r\nfrom django.views import View\r\nfrom django.views.generic import ListView, DetailView, UpdateView, DeleteView, CreateView\r\nfrom models_database.models import Product\r\n\r\nclass ProductsList(ListView):\r\n    template_name = 'models_database/products_list.html'\r\n    model = Product\r\n    context_object_name = 'products'\r\n\r\nclass ProductDetail(DetailView):\r\n    template_name = 'models_database/product_detail.html'\r\n    model = Product\r\n    context_object_name = 'product'\r\n\r\nclass ProductsUpdate(UpdateView):\r\n    template_name = 'models_database/product_form.html'\r\n    model = Product\r\n    fields = ['product_name', 'price', 'description']\r\n\r\n    def get_success_url(self):\r\n        return reverse_lazy('product_detail', kwargs={'pk': self.objects.pk})\r\n\r\nclass ProductsDelete(DeleteView):\r\n    template_name = 'models_database/product_confirm_delete.html'\r\n    model = Product\r\n    success_url = reverse_lazy('products_list')\r\n\r\nclass ProductCreate(CreateView):\r\n    template_name = 'models_database/product_create.html'\r\n    model = Product\r\n    fields = ['product_name', 'description', 'price', 'quantity', 'image', 'category']\r\n    success_url = reverse_lazy('product_list')
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/models_database/views.py b/models_database/views.py
--- a/models_database/views.py	(revision 9bff072f6e1a8e9b720d1fc2a98b8cfa95d11945)
+++ b/models_database/views.py	(date 1729608378761)
@@ -4,11 +4,14 @@
 from django.views import View
 from django.views.generic import ListView, DetailView, UpdateView, DeleteView, CreateView
 from models_database.models import Product
+from django_filters.views import FilterView
+from models_database import filters
 
-class ProductsList(ListView):
+class ProductsList(FilterView):
     template_name = 'models_database/products_list.html'
     model = Product
     context_object_name = 'products'
+    filterset_class = filters.Product
 
 class ProductDetail(DetailView):
     template_name = 'models_database/product_detail.html'
@@ -21,7 +24,7 @@
     fields = ['product_name', 'price', 'description']
 
     def get_success_url(self):
-        return reverse_lazy('product_detail', kwargs={'pk': self.objects.pk})
+        return reverse_lazy('product_detail', kwargs={'pk': self.object.pk})
 
 class ProductsDelete(DeleteView):
     template_name = 'models_database/product_confirm_delete.html'
@@ -32,4 +35,4 @@
     template_name = 'models_database/product_create.html'
     model = Product
     fields = ['product_name', 'description', 'price', 'quantity', 'image', 'category']
-    success_url = reverse_lazy('product_list')
\ No newline at end of file
+    success_url = reverse_lazy('products_list')
\ No newline at end of file
Index: online_store/settings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\r\nDjango settings for online_store project.\r\n\r\nGenerated by 'django-admin startproject' using Django 5.1.1.\r\n\r\nFor more information on this file, see\r\nhttps://docs.djangoproject.com/en/5.1/topics/settings/\r\n\r\nFor the full list of settings and their values, see\r\nhttps://docs.djangoproject.com/en/5.1/ref/settings/\r\n\"\"\"\r\n\r\nfrom pathlib import Path\r\n\r\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\r\nBASE_DIR = Path(__file__).resolve().parent.parent\r\n\r\n\r\n# Quick-start development settings - unsuitable for production\r\n# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/\r\n\r\n# SECURITY WARNING: keep the secret key used in production secret!\r\nSECRET_KEY = 'django-insecure-_1b40$(d6pt#-w4d1(th7vpt!jo)7=cmvr0@xq(x5u0fcyk%69'\r\n\r\n# SECURITY WARNING: don't run with debug turned on in production!\r\nDEBUG = True\r\n\r\nALLOWED_HOSTS = []\r\n\r\n\r\n# Application definition\r\n\r\nINSTALLED_APPS = [\r\n    'django.contrib.admin',\r\n    'django.contrib.auth',\r\n    'django.contrib.contenttypes',\r\n    'django.contrib.sessions',\r\n    'django.contrib.messages',\r\n    'django.contrib.staticfiles',\r\n    'models_database',\r\n    'bootstrap5',\r\n]\r\n\r\nMIDDLEWARE = [\r\n    'django.middleware.security.SecurityMiddleware',\r\n    'django.contrib.sessions.middleware.SessionMiddleware',\r\n    'django.middleware.common.CommonMiddleware',\r\n    'django.middleware.csrf.CsrfViewMiddleware',\r\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\r\n    'django.contrib.messages.middleware.MessageMiddleware',\r\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\r\n]\r\n\r\nROOT_URLCONF = 'online_store.urls'\r\n\r\nTEMPLATES = [\r\n    {\r\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\r\n        'DIRS': [BASE_DIR / 'templates'],\r\n        'APP_DIRS': True,\r\n        'OPTIONS': {\r\n            'context_processors': [\r\n                'django.template.context_processors.debug',\r\n                'django.template.context_processors.request',\r\n                'django.contrib.auth.context_processors.auth',\r\n                'django.contrib.messages.context_processors.messages',\r\n            ],\r\n        },\r\n    },\r\n]\r\n\r\nWSGI_APPLICATION = 'online_store.wsgi.application'\r\n\r\n\r\n# Database\r\n# https://docs.djangoproject.com/en/5.1/ref/settings/#databases\r\n\r\nDATABASES = {\r\n    'default': {\r\n        'ENGINE': 'django.db.backends.sqlite3',\r\n        'NAME': BASE_DIR / 'db.sqlite3',\r\n    }\r\n}\r\n\r\n\r\n# Password validation\r\n# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators\r\n\r\nAUTH_PASSWORD_VALIDATORS = [\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\r\n    },\r\n]\r\n\r\n\r\n# Internationalization\r\n# https://docs.djangoproject.com/en/5.1/topics/i18n/\r\n\r\nLANGUAGE_CODE = 'en-us'\r\n\r\nTIME_ZONE = 'UTC'\r\n\r\nUSE_I18N = True\r\n\r\nUSE_TZ = True\r\n\r\n\r\n# Static files (CSS, JavaScript, Images)\r\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\r\n\r\nSTATIC_URL = 'static/'\r\n\r\n# Default primary key field type\r\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\r\n\r\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\r\n\r\nimport os\r\n\r\nMEDIA_URL = '/media/'\r\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/online_store/settings.py b/online_store/settings.py
--- a/online_store/settings.py	(revision 9bff072f6e1a8e9b720d1fc2a98b8cfa95d11945)
+++ b/online_store/settings.py	(date 1729327125334)
@@ -39,6 +39,7 @@
     'django.contrib.staticfiles',
     'models_database',
     'bootstrap5',
+    'django_filters',
 ]
 
 MIDDLEWARE = [
Index: online_store/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\r\nURL configuration for online_store project.\r\n\r\nThe `urlpatterns` list routes URLs to views. For more information please see:\r\n    https://docs.djangoproject.com/en/5.1/topics/http/urls/\r\nExamples:\r\nFunction views\r\n    1. Add an import:  from my_app import views\r\n    2. Add a URL to urlpatterns:  path('', views.home, name='home')\r\nClass-based views\r\n    1. Add an import:  from other_app.views import Home\r\n    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\r\nIncluding another URLconf\r\n    1. Import the include() function: from django.urls import include, path\r\n    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\r\n\"\"\"\r\nfrom django.contrib import admin\r\nfrom django.urls import path\r\nfrom django.conf.urls.static import static\r\nfrom django.conf import settings\r\nfrom models_database import views\r\n\r\nurlpatterns = [\r\n    path('admin/', admin.site.urls),\r\n    path('products_list/', views.ProductsList.as_view(), name='products_list'),\r\n    path('product_create/', views.ProductCreate.as_view(), name='product_create'),\r\n    path('products/<int:pk>/', views.ProductDetail.as_view(), name='product_detail'),\r\n    path('products/<int:pk>/update/', views.ProductsUpdate.as_view(), name='product_update'),\r\n    path('products/<int:pk>/delete/', views.ProductsDelete.as_view(), name='product_delete')\r\n]\r\n\r\nif settings.DEBUG:\r\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/online_store/urls.py b/online_store/urls.py
--- a/online_store/urls.py	(revision 9bff072f6e1a8e9b720d1fc2a98b8cfa95d11945)
+++ b/online_store/urls.py	(date 1729595728636)
@@ -24,7 +24,7 @@
     path('admin/', admin.site.urls),
     path('products_list/', views.ProductsList.as_view(), name='products_list'),
     path('product_create/', views.ProductCreate.as_view(), name='product_create'),
-    path('products/<int:pk>/', views.ProductDetail.as_view(), name='product_detail'),
+    path('product/<int:pk>/detail/', views.ProductDetail.as_view(), name='product_detail'),
     path('products/<int:pk>/update/', views.ProductsUpdate.as_view(), name='product_update'),
     path('products/<int:pk>/delete/', views.ProductsDelete.as_view(), name='product_delete')
 ]
Index: templates/models_database/product_form.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{% extends 'base.html' %}\r\n\r\n{% block title %}Редактировать {{ product.product_name }}{% endblock %}\r\n\r\n{% block content %}\r\n<div class=\"container mt-5\">\r\n    <h1>Редактировать товар</h1>\r\n    <form method=\"POST\" enctype=\"multipart/form-data\">\r\n        {% csrf_token %}\r\n        {{ form.as_p }}\r\n        <button type=\"submit\" class=\"btn btn-primary\">Сохранить изменения</button>\r\n        <a href=\"{% url 'product_detail' product.pk %}\" class=\"btn btn-secondary\">Отмена</a>\r\n    </form>\r\n</div>\r\n{% endblock %}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/models_database/product_form.html b/templates/models_database/product_form.html
--- a/templates/models_database/product_form.html	(revision 9bff072f6e1a8e9b720d1fc2a98b8cfa95d11945)
+++ b/templates/models_database/product_form.html	(date 1729593517198)
@@ -8,6 +8,21 @@
     <form method="POST" enctype="multipart/form-data">
         {% csrf_token %}
         {{ form.as_p }}
+        {% if form.errors %}
+            <div class="alert alert-danger">
+                <strong>Ошибки при заполнении формы:</strong>
+                <ul>
+                    {% for field in form %}
+                        {% if field.errors %}
+                            <li>{{ field.label }}: {{ field.errors|striptags }}</li>
+                        {% endif %}
+                    {% endfor %}
+                    {% for error in form.non_field_errors %}
+                        <li>{{ error|striptags }}</li>
+                    {% endfor %}
+                </ul>
+            </div>
+        {% endif %}
         <button type="submit" class="btn btn-primary">Сохранить изменения</button>
         <a href="{% url 'product_detail' product.pk %}" class="btn btn-secondary">Отмена</a>
     </form>
Index: templates/models_database/products_list.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{% extends '../base.html' %}\r\n{% load static %}\r\n{% block title %} Продукты {% endblock %}\r\n{% block content %}\r\n  <h1>Продукты:</h1>\r\n    <div class=\"row\">\r\n      {% for product in products %}\r\n      <div class=\"col-md-4 mt-4\">\r\n        <div class=\"card h-100\">\r\n          <div class=\"card-img-container\">\r\n            {% if product.image %}\r\n              <img src=\"{{ product.image.url }}\" alt=\"{{ product.product_name }}\" class=\"card-img-top img-fluid\" width=\"200\" height=\"150\">\r\n            {% else %}\r\n              <img alt=\"Default Image\" class=\"card-img-top img-fluid\">\r\n            {% endif %}\r\n\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <h5 class=\"card-title\">{{ product.product_name }}</h5>\r\n            <p class=\"card-text\">Цена: {{ product.price }}</p>\r\n            <p class=\"card-text\">{{ product.description }}</p>\r\n            <a href=\"{% url 'product_detail' product.pk %}\" class=\"btn btn-primary\">Детали</a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {% endfor %}\r\n    </div>\r\n{% endblock %}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/models_database/products_list.html b/templates/models_database/products_list.html
--- a/templates/models_database/products_list.html	(revision 9bff072f6e1a8e9b720d1fc2a98b8cfa95d11945)
+++ b/templates/models_database/products_list.html	(date 1729328473856)
@@ -1,6 +1,22 @@
 {% extends '../base.html' %}
 {% load static %}
+{% load bootstrap5 %}
 {% block title %} Продукты {% endblock %}
+
+{% block sidebar %}
+  <div class="col-md-3">
+    <div class="card-body">
+      <form method="get">
+        {% csrf_token %}
+        {{ filter.form.as_p }}
+        {% buttons %}
+          <button type="submit" class="btn btn-primary">Поиск</button>
+        {% endbuttons %}
+      </form>
+    </div>
+  </div>
+{% endblock %}
+
 {% block content %}
   <h1>Продукты:</h1>
     <div class="row">
Index: models_database/tests.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.test import TestCase\r\n\r\n# Create your tests here.\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/models_database/tests.py b/models_database/tests.py
--- a/models_database/tests.py	(revision 9bff072f6e1a8e9b720d1fc2a98b8cfa95d11945)
+++ b/models_database/tests.py	(date 1729610914939)
@@ -1,3 +1,106 @@
+from django.urls import reverse
+from models_database.models import Category
 from django.test import TestCase
+from models_database import factories, models
+from PIL import Image
+import tempfile
+
+
+
+class ModelsTestCase(TestCase):
+
+    def setUp(self):
+        self.product = factories.ProductFactory()
+
+        self.image_file = tempfile.NamedTemporaryFile(suffix='.png', delete=False)
+        image = Image.new('RGB', (1, 1), color=(255, 255, 255))
+        image.save(self.image_file, 'PNG')
+        self.image_file.seek(0)
+
+        self.image_path = self.image_file.name
+
+        self.category = models.Category.objects.create(category_name='Test_Category')
+
+
+
+    def test_get_product_list(self):
+        url = reverse('products_list')
+        response = self.client.get(url)
+        self.assertEqual(response.status_code, 200)
+        self.assertEqual(response.context['products'].count(), models.Product.objects.count())
+
+
+    def test_get_product_detail(self):
+        url = reverse('product_detail', kwargs={'pk': self.product.pk})
+        response = self.client.get(url)
+        self.assertEqual(response.status_code, 200)
+
+        product = response.context.get('product')
+
+        self.assertIsNotNone(product, "Product should be present in the response context")
+        self.assertEqual(product.pk, self.product.pk)
+        self.assertEqual(product.product_name, self.product.product_name)
+        self.assertEqual(product.price, self.product.price)
+        self.assertEqual(product.description, self.product.description)
+        self.assertEqual(product.quantity, self.product.quantity)
+
+    def test_update_product(self):
+        url = reverse('product_update', kwargs={'pk': self.product.pk})
+        old_description = self.product.description
+        old_product_name = self.product.product_name
+        old_price = self.product.price
+        response = self.client.post(url, {
+            'product_name': 'new_product_name',
+            'price': old_price,
+            'description': 'new_description'
+        })
+
+
+        self.product.refresh_from_db()
+
+        self.assertEqual(response.status_code, 302)
+        self.assertNotEqual(self.product.description, old_description)
+        self.assertNotEqual(self.product.product_name, old_product_name)
+
+
+    def test_delete_product(self):
+        url = reverse('product_delete', kwargs={'pk': self.product.pk})
+        old_product_count = models.Product.objects.count()
+        response = self.client.delete(url)
+        self.assertEqual(response.status_code, 302)
+        self.assertGreater(old_product_count, models.Product.objects.count())
+
+
+    def test_create_product(self):
+
+        url = reverse('product_create')
+        old_product_count = models.Product.objects.count()
+
+        with open(self.image_path, 'rb') as img:
+            data = {
+                'product_name': 'New_Product',
+                'description': 'New Description',
+                'price': 500,
+                'quantity': 20,
+                'category': self.category.id,  # Используем id категории
+                'image': img  # Передаем файл изображения
+            }
 
-# Create your tests here.
+            response = self.client.post(url, data)
+            self.assertEqual(response.status_code, 302)
+            self.assertNotEqual(models.Product.objects.count(), old_product_count)
+
+            try:
+                new_product = models.Product.objects.get(product_name='New_Product')
+            except models.Product.DoesNotExist:
+                self.fail('Product was not created in the database')
+
+            self.assertEqual(new_product.description, 'New Description')
+            self.assertEqual(new_product.price, 500)
+            self.assertEqual(new_product.quantity, 20)
+            self.assertEqual(new_product.category.id, self.category.id)
+
+
+    def tearDown(self):
+        # Удаляем временный файл
+        self.image_file.close()
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"c34033f0-0222-4b43-9b8f-0b4ec1af754e\" name=\"Changes\" comment=\"\">\r\n      <change afterPath=\"$PROJECT_DIR$/templates/base.html\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/templates/models_database/product_confirm_delete.html\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/templates/models_database/product_create.html\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/templates/models_database/product_detail.html\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/templates/models_database/product_form.html\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/templates/models_database/products_list.html\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/db.sqlite3\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/db.sqlite3\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/media/products/Без_названия.jfif\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/media/products/Без_названия_1.jfif\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/models_database/models.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/models_database/models.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/models_database/views.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/models_database/views.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/online_store/settings.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/online_store/settings.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/online_store/urls.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/online_store/urls.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"HTML File\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;da9rkKn1ght&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/da9rkKn1ght/pythonProject1.git&quot;,\r\n    &quot;accountId&quot;: &quot;12df0459-5303-417e-ad5f-e7f102a25783&quot;\r\n  }\r\n}</component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 6\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2n9oDdrf0uoi9k5kbOkHiUFRcze\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"DefaultHtmlFileTemplate\": \"HTML File\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"git-widget-placeholder\": \"master\",\r\n    \"settings.editor.selected.configurable\": \"promo.database\"\r\n  }\r\n}]]></component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-python-sdk-0e3be3396995-c546a90a8094-com.jetbrains.pycharm.community.sharedIndexes.bundled-PC-242.23339.19\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"c34033f0-0222-4b43-9b8f-0b4ec1af754e\" name=\"Changes\" comment=\"\" />\r\n      <created>1728394534241</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1728394534241</updated>\r\n    </task>\r\n    <servers />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 9bff072f6e1a8e9b720d1fc2a98b8cfa95d11945)
+++ b/.idea/workspace.xml	(date 1729595728682)
@@ -5,21 +5,16 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="c34033f0-0222-4b43-9b8f-0b4ec1af754e" name="Changes" comment="">
-      <change afterPath="$PROJECT_DIR$/templates/base.html" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/templates/models_database/product_confirm_delete.html" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/templates/models_database/product_create.html" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/templates/models_database/product_detail.html" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/templates/models_database/product_form.html" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/templates/models_database/products_list.html" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/models_database/factories.py" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/models_database/filters.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/db.sqlite3" beforeDir="false" afterPath="$PROJECT_DIR$/db.sqlite3" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/media/products/Без_названия.jfif" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/media/products/Без_названия_1.jfif" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/models_database/models.py" beforeDir="false" afterPath="$PROJECT_DIR$/models_database/models.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/models_database/tests.py" beforeDir="false" afterPath="$PROJECT_DIR$/models_database/tests.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/models_database/views.py" beforeDir="false" afterPath="$PROJECT_DIR$/models_database/views.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/online_store/settings.py" beforeDir="false" afterPath="$PROJECT_DIR$/online_store/settings.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/online_store/urls.py" beforeDir="false" afterPath="$PROJECT_DIR$/online_store/urls.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/templates/base.html" beforeDir="false" afterPath="$PROJECT_DIR$/templates/base.html" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/templates/models_database/product_form.html" beforeDir="false" afterPath="$PROJECT_DIR$/templates/models_database/product_form.html" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/templates/models_database/products_list.html" beforeDir="false" afterPath="$PROJECT_DIR$/templates/models_database/products_list.html" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -30,6 +25,7 @@
     <option name="RECENT_TEMPLATES">
       <list>
         <option value="HTML File" />
+        <option value="Python Script" />
       </list>
     </option>
   </component>
@@ -60,14 +56,16 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "DefaultHtmlFileTemplate": "HTML File",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "git-widget-placeholder": "master",
-    "settings.editor.selected.configurable": "promo.database"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;DefaultHtmlFileTemplate&quot;: &quot;HTML File&quot;,
+    &quot;Python.models.executor&quot;: &quot;Run&quot;,
+    &quot;Python.settings.executor&quot;: &quot;Run&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;master&quot;,
+    &quot;settings.editor.selected.configurable&quot;: &quot;promo.database&quot;
   }
-}]]></component>
+}</component>
   <component name="SharedIndexes">
     <attachedChunks>
       <set>
@@ -86,4 +84,27 @@
     </task>
     <servers />
   </component>
+  <component name="Vcs.Log.Tabs.Properties">
+    <option name="TAB_STATES">
+      <map>
+        <entry key="MAIN">
+          <value>
+            <State>
+              <option name="FILTERS">
+                <map>
+                  <entry key="branch">
+                    <value>
+                      <list>
+                        <option value="master" />
+                      </list>
+                    </value>
+                  </entry>
+                </map>
+              </option>
+            </State>
+          </value>
+        </entry>
+      </map>
+    </option>
+  </component>
 </project>
\ No newline at end of file
Index: models_database/filters.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/models_database/filters.py b/models_database/filters.py
new file mode 100644
--- /dev/null	(date 1729344953242)
+++ b/models_database/filters.py	(date 1729344953242)
@@ -0,0 +1,29 @@
+import django_filters
+from django.db.models import Q
+import models_database.models
+
+
+class Product(django_filters.FilterSet):
+    price_range = django_filters.RangeFilter(field_name='price', label='Цена от и до')
+    available = django_filters.BooleanFilter(method='filter_available', label='В наличии')
+    term = django_filters.CharFilter(method='filter_term', label='Поиск')
+    category = django_filters.CharFilter(method='filter_category', label='Категория')
+    class Meta:
+        model = models_database.models.Product
+        fields = ['term', 'price_range', 'available', 'category']
+
+    def filter_available(self, queryset, name, value):
+        if value is None:
+            return queryset
+        if value:
+            return queryset.filter(quantity__gt=0)
+        return queryset.filter(quantity=0)
+
+    def filter_term(self, queryset, name, value):
+        criteria = Q()
+        for term in value.split():
+            criteria &= Q(product_name__icontains=term) |Q(description__icontains=term)
+        return queryset.filter(criteria).distinct()
+
+    def filter_category(self, queryset, name, value):
+        return queryset.filter(category__category_name__icontains=value)
\ No newline at end of file
Index: templates/base.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n  <title>{% block title %} {% endblock %}</title>\r\n  {% load bootstrap5 %}\r\n  {% bootstrap_css %}\r\n</head>\r\n<body>\r\n    <nav>\r\n        <ul>\r\n            <li><a href=\"{% url 'products_list' %}\">Список продуктов</a></li>\r\n            <li><a href=\"{% url 'product_create' %}\">Добавить продукт</a></li>\r\n        </ul>\r\n    </nav>\r\n  <div class=\"container nt-5 mb-5\">\r\n      {% block content %}\r\n      {% endblock %}\r\n  </div>\r\n  {% bootstrap_javascript %}\r\n</body>\r\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/base.html b/templates/base.html
--- a/templates/base.html	(revision 9bff072f6e1a8e9b720d1fc2a98b8cfa95d11945)
+++ b/templates/base.html	(date 1729327747341)
@@ -15,6 +15,7 @@
         </ul>
     </nav>
   <div class="container nt-5 mb-5">
+      {% block sidebar %}{% endblock %}
       {% block content %}
       {% endblock %}
   </div>
Index: models_database/factories.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/models_database/factories.py b/models_database/factories.py
new file mode 100644
--- /dev/null	(date 1729595595309)
+++ b/models_database/factories.py	(date 1729595595309)
@@ -0,0 +1,24 @@
+import factory
+from factory.django import ImageField
+from models_database import models
+from models_database.models import Category
+
+
+class CategoryFactory(factory.django.DjangoModelFactory):
+    category_name = factory.Faker('word')
+    description = factory.Faker('text')
+
+    class Meta:
+        model = models.Category
+
+
+class ProductFactory(factory.django.DjangoModelFactory):
+    product_name = factory.Faker('word')
+    description = factory.Faker('text')
+    price = factory.Faker('random_int', min=0, max=1000)
+    quantity = factory.Faker('random_int', min=0, max=500)
+    image = factory.Faker('image_url')
+    category = factory.SubFactory(CategoryFactory)
+
+    class Meta:
+        model = models.Product
